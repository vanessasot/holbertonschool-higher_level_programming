The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------

This is a test file for add_integer function
``add_integer`` from the ``0-add_integer`` module:

    >>> add_integer = __import__('0-add_integer').add_integer

Can try next cases:

Zero arguments:

    >>> add_integer()
    Traceback (most recent call last):
        ...
    TypeError: add_integer() missing 1 required positional argument: 'a'

One argument:

    >>> add_integer(1)
    99

Three arguments:

    >>> add_integer(8, 4, 1)
    Traceback (most recent call last):
        ...
    TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

if a is not int or float:

    >>> add_integer("hello", 5)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer((7,3), 3)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer([7], 1)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(None, 9)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(False, 4)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer(True, 6)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

if b is not int or float:

    >>> add_integer(4, "wolrd")
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(6, (1,2))
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(3, [5])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(8, None)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(9, True)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

    >>> add_integer(7, False)
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer

a and b are not int or float

    >>> add_integer([5], [9])
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer("2", "3")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

    >>> add_integer((6,3), (2,8))
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer

if a is float:

    >>> add_integer(54.2, 4)
    58
    >>> add_integer(8.8, 2)
    10

if b is float:

    >>> add_integer(6, 3.4)
    9
    >>> add_integer(2, 4.4)
    6

if a and b are float:

    >>> add_integer(2.1, 7.8)
    9
    >>> add_integer(7.7, 8.3)
    15

if a and b are negative numbers:

    >>> add_integer(-6, -4)
    -10

    >>> add_integer(-3.4, -5)
    -8

    >>> add_integer(-1, -2.3)
    -3

    >>> add_integer(-2.1, -1.2)
    -3

max infinite number and NaN:

    >>> add_integer(1, float("inf"))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(1, float("nan"))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer
